 /*
 
 Que - Given a read only array of n + 1 integers between 1 and n, find one number that repeats in linear time 
       using less than O(n) space and traversing the stream sequentially O(1) times.
       
*/

--------------------------------------------------------------------
/*    Constant Array is given. You Can't change array values.     */
--------------------------------------------------------------------

int Solution::repeatedNumber(const vector<int> &A) {
    int slow = A[0];
  int fast = A[A[0]];
  while (slow != fast) {
    slow = A[slow];
    fast = A[A[fast]];
  }

  fast = 0;
  while (slow != fast) {
    slow = A[slow];
    fast = A[fast];
  }
  if(slow==0) return -1;
  return slow;
}


---------------------------------------------------------------------------------------------------
 approach that is based on Floydâ€™s cycle finding algorithm
 --------------------------------------------------------------------------------------------------
 
 ////***Sumit Kumar***********////

#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define int ll
#define ps push
#define pb push_back
#define INF 1000000000
#define MOD 1000000007
#define mp make_pair
#define REP(i,n) for (int i = 0; i < n; i++)
#define FOR(i,a,b) for (int i = a; i < b; i++)
#define REPD(i,n) for (int i = n-1; i >= 0; i--)
#define FORD(i,a,b) for (int i = a; i >= b; i--)
#define remax(a,b) a = max(a,b)
#define remin(a,b) a = min(a,b)
#define all(v) v.begin(),v.end()
#define pii pair<int,int>
#define F first
#define S second
#define mii map<int,int>
#define vi vector<int>
#define vvi vector<vi>
#define vpii vector<pair<int,int>>
#define pqi priority_queue<int>
#define pqpii priority_queue<pair<int,int>>
#define itr :: iterator it
#define WL(t) while(t --)
#define gcd(a,b) __gcd((a),(b))
#define lcm(a,b) ((a)*(b))/gcd((a),(b))
#define debug(x) cout << x << endl;
#define debug2(x,y) cout << x << " " << y << endl;
#define debug3(x,y,z) cout << x << " " << y << " " << z << endl;



int solution(const vector<int> &A){
    int slow = A[0];
    int fast = A[A[0]];
    cout<<slow<<" "<<fast<<endl;
    while (slow != fast) {
        slow = A[slow];
        fast = A[A[fast]];
        cout<<slow<<" "<<fast<<endl;
    }

    fast = 0;
    cout<<slow<<" "<<fast<<endl;
    while (slow != fast) {
        slow = A[slow];
        fast = A[fast];
        cout<<slow<<" "<<fast<<endl;
    }
  
    if(slow==0) return -1;
    return slow;
}


void solve(){
    int n;
    cin>>n;
    vi v;
    REP(i,n){
        int x;
        cin>>x;
        v.pb(x);
    }
    debug(solution(v));
}

signed main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
	cout.tie(0);
	int t=1;
// 	cin>>t;
	WL(t){
	    solve();
	}
}
------------------------------------------------------------------
/* 
TestCase - 
8
1 2 3 4 5 6 7 7
1 2
2 4
3 6
4 7
5 7
6 7
7 7
7 0
7 1
7 2
7 3
7 4
7 5
7 6
7 7
7
*/
----------------------------------------------------
