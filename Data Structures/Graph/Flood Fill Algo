// https://www.hackerearth.com/practice/algorithms/graphs/flood-fill-algorithm/practice-problems/algorithm/micro-and-maze-3/

/*

Micro and Maze


Micro just bought a maze, that can be represented as a matrix A of size , where rows are numbered from 1 to N and columns are numbered from 1 to M. Each cell of the matrix can be either 0 or 1. If a cell is 0, that means it cannot be visited and if it is 1, then it can be visited. Allowed moves are up, down, left and right. Help Micro to find out if he can reach from the cell  to the cell , it is guaranteed that the cells  and  have value 1.

Input:
First line consists of a two space separated integers denoting N and M.
Following N lines consists of M space separated integers denoting the matrix A.

Output:
Print "Yes" (without quotes), if Micro can reach from cell  to  otherwise print "No" (without quotes).

Constraints:
 

SAMPLE INPUT 
3 3
1 0 1
1 0 0
1 1 1

SAMPLE OUTPUT 
Yes

*/

////***Sumit Kumar***********////

#include<bits/stdc++.h>
using namespace std;
 
#define ll long long
#define int ll
#define ps push
#define pb push_back
#define INF 1000000000
#define MOD 1000000007
#define mp make_pair
#define REP(i,n) for (int i = 0; i < n; i++)
#define FOR(i,a,b) for (int i = a; i < b; i++)
#define REPD(i,n) for (int i = n-1; i >= 0; i--)
#define FORD(i,a,b) for (int i = a; i >= b; i--)
#define remax(a,b) a = max(a,b)
#define remin(a,b) a = min(a,b)
#define all(v) v.rbegin(),v.rend()
#define pii pair<int,int>
#define F first
#define S second
#define mii map<int,int>
#define vi vector<int>
#define vvi vector<vi>
#define vpii vector<pair<int,int>>
#define pqi priority_queue<int>
#define pqpii priority_queue<pair<int,int>>
#define itr :: iterator it
#define WL(t) while(t --)
#define gcd(a,b) __gcd((a),(b))
#define lcm(a,b) ((a)*(b))/gcd((a),(b))
#define debug(x) cout << x << endl;
#define debug2(x,y) cout << x << " " << y << endl;
#define debug3(x,y,z) cout << x << " " << y << " " << z << endl;

bool vis[1005][1005];
int A[1005][1005];
int n,m;

bool dfs(int x,int y,int X,int Y){
    if(x==X &&y==Y)
        return true;
    if(x<0||y<0)
        return false;
    if(x>n||y>m)
        return false;
    if(vis[x][y])
        return false;
    if(A[x][y]==0)
        return false;


    vis[x][y] = true;

    if(dfs(x+1,y,X,Y))
        return true;
    if(dfs(x-1,y,X,Y))
        return true;
    if(dfs(x,y+1,X,Y))
        return true;
    if(dfs(x,y-1,X,Y))
        return true;

    return false;
}


void solve(){    
    cin>>n>>m;
    FOR(i,1,n+1)
        FOR(j,1,m+1)
            cin>>A[i][j];

    if(dfs(1,1,n,m)){
        debug("Yes");
    }else{
        debug("No");
    }


}

signed main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int t=1;
    // cin>>t;    
    WL(t){        
        solve();
    }
    
}
