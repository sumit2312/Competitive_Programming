*****************************************
class _stack{
stack<int> s;
int minEle;
public :
    int getMin();
    int pop();
    void push(int);
};
***************************************

int _stack :: getMin()
{
    if(s.empty())
        return -1;
    else
        return minEle;
}
int _stack ::pop()
{
    if(s.empty())
    {
        return -1;
    }
    int t = s.top();
    s.pop();
    if(t<minEle)
    {
      int k = minEle;
        minEle = 2*minEle-t;
        return k;

    }else
    return t;
}
void _stack::push(int x)
{
    if(s.empty())
    {
        minEle =x ;
        s.push(x);
        return ;
    }
    if(x<minEle)
    {
        s.push(2*x-minEle);
        minEle = x;
    }else
    s.push(x);
}
/////////////////********************************OR**************************///////////////////////////
/////************************              USING TWO STACK             **************///////////////////

class MinStack {
public:
    /** initialize your data structure here. */
    stack<int> s1;
    stack<int> s2;
    MinStack() {
        
    }
    
    void push(int x) {
        s1.push(x);
        if(s2.empty()||x<=getMin()){
            s2.push(x);
        }
        
    }
    
    void pop() {
        if(s1.top()==s2.top()){
            s2.pop();
        }
        s1.pop();
    }
    
    int top() {
        return s1.top();
    }
    
    int getMin() {
        return s2.top();
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(x);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
