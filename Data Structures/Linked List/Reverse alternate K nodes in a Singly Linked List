/* Link list node */
class Node  
{  
    public: 
    int data;  
    Node* next;  
};  
  
/* Reverses alternate k nodes and  
returns the pointer to the new head node */
Node *kAltReverse(Node *head, int k)  
{  
    Node* current = head;  
    Node* next;  
    Node* prev = NULL;  
    int count = 0;  
  
    /*1) reverse first k nodes of the linked list */
    while (current != NULL && count < k)  
    {  
    next = current->next;  
    current->next = prev;  
    prev = current;  
    current = next;  
    count++;  
    }  
      
    /* 2) Now head points to the kth node.  
    So change next  of head to (k+1)th node*/
    if(head != NULL)  
    head->next = current;  
  
    /* 3) We do not want to reverse next k  
       nodes. So move the current  
        pointer to skip next k nodes */
    count = 0;  
    while(count < k-1 && current != NULL )  
    {  
    current = current->next;  
    count++;  
    }  
  
    /* 4) Recursively call for the list  
    starting from current->next. And make 
    rest of the list as next of first node */
    if(current != NULL)  
    current->next = kAltReverse(current->next, k);  
  
    /* 5) prev is new head of the input list */
    return prev;  
}  
