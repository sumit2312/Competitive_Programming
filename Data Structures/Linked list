
#include<bits/stdc++.h>
using namespace std;

#define ll long long
#define int ll
#define ps push
#define pb push_back
#define INF 1000000000
#define MOD 1000000007
#define mp make_pair
#define REP(i,n) for (int i = 0; i < n; i++)
#define FOR(i,a,b) for (int i = a; i < b; i++)
#define REPD(i,n) for (int i = n-1; i >= 0; i--)
#define FORD(i,a,b) for (int i = a; i >= b; i--)
#define all(v) v.begin(),v.end()
#define pii pair<int,int>
#define F first
#define S second
#define mii map<int,int>
#define vi vector<int>
#define vvi vector<vi>
#define vpii vector<pair<int,int>>
#define pqi priority_queue<int>
#define pqpii priority_queue<pair<int,int>>
#define itr :: iterator it
#define WL(t) while(t --)
#define gcd(a,b) __gcd((a),(b))
#define lcm(a,b) ((a)*(b))/gcd((a),(b))
#define debug(x) cout << x << endl;
#define debug2(x,y) cout << x << " " << y << endl;
#define debug3(x,y,z) cout << x << " " << y << " " << z << endl;

struct Node
{
	int data;
	struct Node* next;
};

// Insert a node at the end 
void append(struct Node** head,int data){
	struct Node* new_Node = new Node();
	struct Node* last = *head;

	new_Node->data = data;
	new_Node->next = NULL;

	if(*head==NULL){
		*head = new_Node;
		return;
	}

	while(last->next!=NULL){
		last=last->next;
	}

	last->next=new_Node;
	return;
}

//Insert a node at the begining 
void push(struct Node** head,int data){
	Node* temp = new Node();
	temp->data = data;
	temp->next = (*head);
	(*head) = temp;
}

// Print the Linked List
void printList(struct Node* n){
	while(n!=NULL){
		cout<<n->data<<endl;
		n=n->next;
	}

}


signed main(){
	struct Node* head = NULL;
	struct Node* second = NULL;
	struct Node* third = NULL;

	head = (struct Node*)malloc(sizeof(struct Node));
	second = (struct Node*)malloc(sizeof(struct Node));
	third = (struct Node*)malloc(sizeof(struct Node));;

	head->data = 1;
	head->next = second;

	second->data = 2;
	second->next = third;

	third->data = 3;
	third->next = NULL;

	append(&head,5);

	push(&head,10);

	printList(head);

}
