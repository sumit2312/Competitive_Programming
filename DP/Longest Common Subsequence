////***Sumit Kumar***********////

#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define int ll
#define ps push
#define pb push_back
#define INF 1000000000
#define MOD 1000000007
#define mp make_pair
#define REP(i, n) for (int i = 0; i < n; i++)
#define FOR(i, a, b) for (int i = a; i < b; i++)
#define REPD(i, n) for (int i = n - 1; i >= 0; i--)
#define FORD(i, a, b) for (int i = a; i >= b; i--)
#define remax(a, b) a = max(a, b)
#define remin(a, b) a = min(a, b)
#define all(v) v.begin(), v.end()
#define pii pair<int, int>
#define F first
#define S second
#define mii map<int, int>
#define vi vector<int>
#define vvi vector<vi>
#define vpii vector<pair<int, int>>
#define pqi priority_queue<int>
#define pqpii priority_queue<pair<int, int>>
#define itr ::iterator it
#define WL(t) while (t--)
#define gcd(a, b) __gcd((a), (b))
#define lcm(a, b) ((a) * (b)) / gcd((a), (b))
#define debug(x) cout << x << endl;
#define debug2(x, y) cout << x << " " << y << endl;
#define debug3(x, y, z) cout << x << " " << y << " " << z << endl;

void solve() {
  int m, n;
  cin >> n >> m;
  int x[n], y[m];
  REP(i, n) cin >> x[i];
  REP(i, m) cin >> y[i];

  int k[n + 1][m + 1];

  REP(i, n + 1) {
    REP(j, m + 1) {
      if (i == 0 || j == 0) {
        k[i][j] = 0;
      } else if (x[i - 1] == y[j - 1]) {
        k[i][j] = k[i - 1][j - 1] + 1;
      } else {
        k[i][j] = max(k[i - 1][j], k[i][j - 1]);
      }
    }
  }
//   REP(i,n+1){
//       REP(j,m+1){
//           cout<<k[i][j]<<" ";
//       }
//       cout<<endl;
//   }
//   debug(k[n][m]);
  int index = k[n][m];
  // debug(index);
  int sz = index;
  int arr[index];
  int i = n, j = m;
  while (i > 0 && j > 0) {
    if (x[i - 1] == y[j - 1]) {
      arr[index - 1] = x[i - 1];
      i--;
      j--;
      index--;
    } else if (k[i - 1][j] > k[i][j - 1]) {
      i--;
    } else {
      j--;
    }
  }
  REP(i, sz) { cout << arr[i] << " "; }
}

signed main() {
  ios::sync_with_stdio(0);
  cin.tie(0);
  cout.tie(0);
  int t = 1;
  //     cin>>t;
  WL(t) { solve(); }
}
